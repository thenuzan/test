<?xml version="1.0" encoding="UTF-8"?>
<template name="getAllBookmarks" xmlns="http://ws.apache.org/ns/synapse">

        <parameter name="tag_separator" description="{comma} optional — (Recommended) Returns tags separated by a comma, instead of a space character."/>
        <parameter name="tag" description="{TAG} optional — Filter by this tag."/>
        <parameter name="start" description="{xx} optional — Start returning posts this many results into the set"/>
        <parameter name="results" description="{xx} optional — Return up to this many results."/>
        <parameter name="fromdt" description="{CCYY-MM-DDThh:mm:ssZ} optional — Filter for posts on this date or later."/>
        <parameter name="todt" description="{CCYY-MM-DDThh:mm:ssZ} optional — Filter for posts on this date or earlier."/>
        <parameter name="meta" description="{yes} optional — Include change detection signatures on each item in a ‘meta’ attribute."/>

    <sequence>

        <property name="uri.var.tag_separator" expression="$func:tag_separator" type="STRING"/>
        <property name="uri.var.tag" expression="$func:tag" type="STRING"/>
        <property name="uri.var.start" expression="$func:start" type="STRING"/>
        <property name="uri.var.results" expression="$func:results" type="STRING"/>
        <property name="uri.var.fromdt" expression="$func:fromdt" type="STRING"/>
        <property name="uri.var.todt" expression="$func:todt" type="STRING"/>
        <property name="uri.var.meta" expression="$func:meta"    type="STRING"/>

        <filter
                xpath="(not(get-property('uri.var.tag_separator') = '' or (not(string(get-property('uri.var.tag_separator'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'&amp;tag_separator=',get-property('uri.var.tag_separator'))" />
            </then>
        </filter>
        <filter
                xpath="(not(get-property('uri.var.tag') = '' or (not(string(get-property('uri.var.tag'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'&amp;tag=',get-property('uri.var.tag'))" />
            </then>
        </filter>

        <filter
                xpath="(not(get-property('uri.var.start') = '' or (not(string(get-property('uri.var.start'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'&amp;start=',get-property('uri.var.start'))" />
            </then>
        </filter>
        <filter
                xpath="(not(get-property('uri.var.results') = '' or (not(string(get-property('uri.var.results'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'&amp;results=',get-property('uri.var.results'))" />
            </then>
        </filter>
        <filter
                xpath="(not(get-property('uri.var.fromdt') = '' or (not(string(get-property('uri.var.fromdt'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'&amp;fromdt=',get-property('uri.var.fromdt'))" />
            </then>
        </filter>
        <filter
                xpath="(not(get-property('uri.var.todt') = '' or (not(string(get-property('uri.var.todt'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'&amp;todt=',get-property('uri.var.todt'))" />
            </then>
        </filter>
        <filter
                xpath="(not(get-property('uri.var.meta') = '' or (not(string(get-property('uri.var.meta'))))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat(get-property('uri.var.apiParameters'),'&amp;meta=',get-property('uri.var.meta'))" />
            </then>
        </filter>


        <property name="Accept-Encoding" value="deflate" scope="transport" />

       <payloadFactory media-type="xml">
           <format>
               <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                   <soapenv:Header/>
                   <soapenv:Body/>
               </soapenv:Envelope>
           </format>
           <args />
       </payloadFactory>
       <property name="messageType" value="application/xml" scope="axis2" />

       <call>
           <endpoint>
               <http method="GET" uri-template="{uri.var.delicious.url}/v1/posts/all?{uri.var.apiParameters}" />
           </endpoint>
       </call>
   </sequence>

</template>
